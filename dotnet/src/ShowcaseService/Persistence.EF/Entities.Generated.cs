using System;
using System.ComponentModel.DataAnnotations;
using System.Collections.ObjectModel;
using System.Linq.Expressions;
using MedicalResearch.SubjectData.Model;

namespace MedicalResearch.SubjectData.Persistence {

  /// <summary> entity, which relates to <see href="https://www.hl7.org/fhir/researchsubject.html">HL7.ResearchSubject</see> </summary>
  [PrimaryIdentity(nameof(SubjectUid))]
  [PropertyGroup(nameof(SubjectUid), nameof(SubjectUid))]
  [PropertyGroup(nameof(ActualSiteUid), nameof(ActualSiteUid))]
  [HasLookup("", nameof(ActualSiteUid), "", null, "Site")]
  [PropertyGroup(nameof(EnrollingSiteUid), nameof(EnrollingSiteUid))]
  [HasLookup("", nameof(EnrollingSiteUid), "", null, "Site")]
  [PropertyGroup(nameof(StudyUid), nameof(StudyUid))]
  [HasLookup("", nameof(StudyUid), "", null, "ResearchStudy")]
  [PropertyGroup("Search", nameof(SubjectIdentifier), nameof(StatusNote))]
  public class SubjectEntity {

  /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
  [Required]
  public Guid SubjectUid { get; set; } = Guid.NewGuid();

  [Required]
  public Guid ActualSiteUid { get; set; }

  [FixedAfterCreation, Required]
  public Guid EnrollingSiteUid { get; set; }

  /// <summary> *this field is optional </summary>
  public Nullable<DateTime> PeriodStart { get; set; }

  /// <summary> *this field is optional </summary>
  public Nullable<DateTime> PeriodEnd { get; set; }

  /// <summary> *this field is optional (use null as value) </summary>
  public String StatusNote { get; set; }

  /// <summary> *this field is optional (use null as value) </summary>
  public String SubjectIdentifier { get; set; }

  /// <summary> AS DECLARED BY <see href="https://www.hl7.org/fhir/valueset-research-subject-status.html">HL7.ResearchSubjectStatus</see>:
  /// candidate | eligible | follow-up | ineligible | not-registered | off-study | on-study | on-study-intervention | on-study-observation | pending-on-study | potential-candidate | screening | withdrawn </summary>
  [Required]
  public String Status { get; set; }

  [Required]
  public Guid StudyUid { get; set; }

  [Required]
  public Int64 ModificationTimestampUtc { get; set; }

  [Required]
  public Boolean IsArchived { get; set; }

  [Required]
  public String AssignedArm { get; set; }

  [Required]
  public String ActualArm { get; set; }

  [Required]
  public String SubstudyNames { get; set; }

  [Referrer]
  public virtual ObservableCollection<SubjectSiteAssignmentEntity> SiteAssignments { get; set; } = new ObservableCollection<SubjectSiteAssignmentEntity>();

#region Mapping

  internal static Expression<Func<Subject, SubjectEntity>> SubjectEntitySelector = ((Subject src) => new SubjectEntity {
    SubjectUid = src.SubjectUid,
    ActualSiteUid = src.ActualSiteUid,
    EnrollingSiteUid = src.EnrollingSiteUid,
    PeriodStart = src.PeriodStart,
    PeriodEnd = src.PeriodEnd,
    StatusNote = src.StatusNote,
    SubjectIdentifier = src.SubjectIdentifier,
    Status = src.Status,
    StudyUid = src.StudyUid,
    ModificationTimestampUtc = src.ModificationTimestampUtc,
    IsArchived = src.IsArchived,
    AssignedArm = src.AssignedArm,
    ActualArm = src.ActualArm,
    SubstudyNames = src.SubstudyNames,
  });

  internal static Expression<Func<SubjectEntity, Subject>> SubjectSelector = ((SubjectEntity src) => new Subject {
    SubjectUid = src.SubjectUid,
    ActualSiteUid = src.ActualSiteUid,
    EnrollingSiteUid = src.EnrollingSiteUid,
    PeriodStart = src.PeriodStart,
    PeriodEnd = src.PeriodEnd,
    StatusNote = src.StatusNote,
    SubjectIdentifier = src.SubjectIdentifier,
    Status = src.Status,
    StudyUid = src.StudyUid,
    ModificationTimestampUtc = src.ModificationTimestampUtc,
    IsArchived = src.IsArchived,
    AssignedArm = src.AssignedArm,
    ActualArm = src.ActualArm,
    SubstudyNames = src.SubstudyNames,
  });

  internal void CopyContentFrom(Subject source, Func<String,bool> onFixedValueChangingCallback = null){
    this.SubjectUid = source.SubjectUid;
    this.ActualSiteUid = source.ActualSiteUid;
    if(!Equals(source.EnrollingSiteUid, this.EnrollingSiteUid)){
      if(onFixedValueChangingCallback == null || onFixedValueChangingCallback.Invoke(nameof(EnrollingSiteUid))){
        this.EnrollingSiteUid = source.EnrollingSiteUid;
      }
    }
    this.PeriodStart = source.PeriodStart;
    this.PeriodEnd = source.PeriodEnd;
    this.StatusNote = source.StatusNote;
    this.SubjectIdentifier = source.SubjectIdentifier;
    this.Status = source.Status;
    this.StudyUid = source.StudyUid;
    this.ModificationTimestampUtc = source.ModificationTimestampUtc;
    this.IsArchived = source.IsArchived;
    this.AssignedArm = source.AssignedArm;
    this.ActualArm = source.ActualArm;
    this.SubstudyNames = source.SubstudyNames;
  }

  internal void CopyContentTo(Subject target, Func<String,bool> onFixedValueChangingCallback = null){
    target.SubjectUid = this.SubjectUid;
    target.ActualSiteUid = this.ActualSiteUid;
    if(!Equals(target.EnrollingSiteUid, this.EnrollingSiteUid)){
      if(onFixedValueChangingCallback == null || onFixedValueChangingCallback.Invoke(nameof(EnrollingSiteUid))){
        target.EnrollingSiteUid = this.EnrollingSiteUid;
      }
    }
    target.PeriodStart = this.PeriodStart;
    target.PeriodEnd = this.PeriodEnd;
    target.StatusNote = this.StatusNote;
    target.SubjectIdentifier = this.SubjectIdentifier;
    target.Status = this.Status;
    target.StudyUid = this.StudyUid;
    target.ModificationTimestampUtc = this.ModificationTimestampUtc;
    target.IsArchived = this.IsArchived;
    target.AssignedArm = this.AssignedArm;
    target.ActualArm = this.ActualArm;
    target.SubstudyNames = this.SubstudyNames;
  }

#endregion

}

  [PrimaryIdentity(nameof(SubjectSiteAssignmentUid))]
  [PropertyGroup(nameof(SubjectSiteAssignmentUid), nameof(SubjectSiteAssignmentUid))]
  [PropertyGroup(nameof(SiteUid), nameof(SiteUid))]
  [HasLookup("", nameof(SiteUid), "", null, "Site")]
  [PropertyGroup(nameof(SubjectUid), nameof(SubjectUid))]
  [HasPrincipal(nameof(Subject), nameof(SubjectUid), nameof(SubjectEntity.SiteAssignments), null, nameof(SubjectEntity))]
  public class SubjectSiteAssignmentEntity {

  /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
  [Required]
  public Guid SubjectSiteAssignmentUid { get; set; } = Guid.NewGuid();

  [Required]
  public DateTime ValidFrom { get; set; }

  /// <summary> <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> of the target Site </summary>
  [Required]
  public Guid SiteUid { get; set; }

  /// <summary> <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> of the target Subject </summary>
  [Required]
  public Guid SubjectUid { get; set; }

  /// <summary> This can be the ID ('surrogate-key') of the Partient record within a site specific patient management system. This MUST NOT be any natural key or plain readable name which exposes the identity of the patient! *this field is optional (use null as value) </summary>
  public String SiteDefinedPatientIdentifier { get; set; }

  /// <summary> *this field is optional </summary>
  public Nullable<Guid> ByInvolvedPersonUid { get; set; }

  [Lookup]
  public virtual SubjectEntity Subject { get; set; }

#region Mapping

  internal static Expression<Func<SubjectSiteAssignment, SubjectSiteAssignmentEntity>> SubjectSiteAssignmentEntitySelector = ((SubjectSiteAssignment src) => new SubjectSiteAssignmentEntity {
    SubjectSiteAssignmentUid = src.SubjectSiteAssignmentUid,
    ValidFrom = src.ValidFrom,
    SiteUid = src.SiteUid,
    SubjectUid = src.SubjectUid,
    SiteDefinedPatientIdentifier = src.SiteDefinedPatientIdentifier,
    ByInvolvedPersonUid = src.ByInvolvedPersonUid,
  });

  internal static Expression<Func<SubjectSiteAssignmentEntity, SubjectSiteAssignment>> SubjectSiteAssignmentSelector = ((SubjectSiteAssignmentEntity src) => new SubjectSiteAssignment {
    SubjectSiteAssignmentUid = src.SubjectSiteAssignmentUid,
    ValidFrom = src.ValidFrom,
    SiteUid = src.SiteUid,
    SubjectUid = src.SubjectUid,
    SiteDefinedPatientIdentifier = src.SiteDefinedPatientIdentifier,
    ByInvolvedPersonUid = src.ByInvolvedPersonUid,
  });

  internal void CopyContentFrom(SubjectSiteAssignment source, Func<String,bool> onFixedValueChangingCallback = null){
    this.SubjectSiteAssignmentUid = source.SubjectSiteAssignmentUid;
    this.ValidFrom = source.ValidFrom;
    this.SiteUid = source.SiteUid;
    this.SubjectUid = source.SubjectUid;
    this.SiteDefinedPatientIdentifier = source.SiteDefinedPatientIdentifier;
    this.ByInvolvedPersonUid = source.ByInvolvedPersonUid;
  }

  internal void CopyContentTo(SubjectSiteAssignment target, Func<String,bool> onFixedValueChangingCallback = null){
    target.SubjectSiteAssignmentUid = this.SubjectSiteAssignmentUid;
    target.ValidFrom = this.ValidFrom;
    target.SiteUid = this.SiteUid;
    target.SubjectUid = this.SubjectUid;
    target.SiteDefinedPatientIdentifier = this.SiteDefinedPatientIdentifier;
    target.ByInvolvedPersonUid = this.ByInvolvedPersonUid;
  }

#endregion

}

}
