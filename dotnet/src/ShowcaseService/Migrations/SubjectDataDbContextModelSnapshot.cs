// <auto-generated />
using System;
using MedicalResearch.SubjectData.Persistence.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalResearch.SubjectData.Migrations
{
    [DbContext(typeof(SubjectDataDbContext))]
    partial class SubjectDataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalResearch.SubjectData.Persistence.SubjectEntity", b =>
                {
                    b.Property<Guid>("SubjectUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualArm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ActualSiteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedArm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnrollingSiteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<long>("ModificationTimestampUtc")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudyUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubstudyNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectUid");

                    b.ToTable("SdrSubjects", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.SubjectData.Persistence.SubjectSiteAssignmentEntity", b =>
                {
                    b.Property<Guid>("SubjectSiteAssignmentUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ByInvolvedPersonUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SiteDefinedPatientIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectSiteAssignmentUid");

                    b.HasIndex("SubjectUid");

                    b.ToTable("SdrSubjectSiteAssignments", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.SubjectData.Persistence.SubjectSiteAssignmentEntity", b =>
                {
                    b.HasOne("MedicalResearch.SubjectData.Persistence.SubjectEntity", "Subject")
                        .WithMany("SiteAssignments")
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MedicalResearch.SubjectData.Persistence.SubjectEntity", b =>
                {
                    b.Navigation("SiteAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
